// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package protocols

import (
	"github.com/stretchr/testify/mock"
	"go.opentelemetry.io/collector/consumer/pdata"
)

type mockBytesMetrics struct {
	mock.Mock
}

func (m *mockBytesMetrics) EncodeMetrics(model interface{}) ([]byte, error) {
	args := m.Called(model)
	return args.Get(0).([]byte), args.Error(1)
}

func (m *mockBytesMetrics) DecodeMetrics(bytes []byte) (interface{}, error) {
	args := m.Called(bytes)
	return args.Get(0), args.Error(1)
}

type mockModelMetrics struct {
	mock.Mock
	typ interface{}
}

func (m *mockModelMetrics) ToMetrics(src interface{}) (pdata.Metrics, error) {
	args := m.Called(src)
	return args.Get(0).(pdata.Metrics), args.Error(1)
}

func (m *mockModelMetrics) FromMetrics(md pdata.Metrics, out interface{}) error {
	args := m.Called(md, out)
	return args.Error(0)
}

func (m *mockModelMetrics) Type() interface{} {
	return m.typ
}

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type mockBytesTraces struct {
	mock.Mock
}

func (m *mockBytesTraces) EncodeTraces(model interface{}) ([]byte, error) {
	args := m.Called(model)
	return args.Get(0).([]byte), args.Error(1)
}

func (m *mockBytesTraces) DecodeTraces(bytes []byte) (interface{}, error) {
	args := m.Called(bytes)
	return args.Get(0), args.Error(1)
}

type mockModelTraces struct {
	mock.Mock
	typ interface{}
}

func (m *mockModelTraces) ToTraces(src interface{}) (pdata.Traces, error) {
	args := m.Called(src)
	return args.Get(0).(pdata.Traces), args.Error(1)
}

func (m *mockModelTraces) FromTraces(md pdata.Traces, out interface{}) error {
	args := m.Called(md, out)
	return args.Error(0)
}

func (m *mockModelTraces) Type() interface{} {
	return m.typ
}

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

type mockBytesLogs struct {
	mock.Mock
}

func (m *mockBytesLogs) EncodeLogs(model interface{}) ([]byte, error) {
	args := m.Called(model)
	return args.Get(0).([]byte), args.Error(1)
}

func (m *mockBytesLogs) DecodeLogs(bytes []byte) (interface{}, error) {
	args := m.Called(bytes)
	return args.Get(0), args.Error(1)
}

type mockModelLogs struct {
	mock.Mock
	typ interface{}
}

func (m *mockModelLogs) ToLogs(src interface{}) (pdata.Logs, error) {
	args := m.Called(src)
	return args.Get(0).(pdata.Logs), args.Error(1)
}

func (m *mockModelLogs) FromLogs(md pdata.Logs, out interface{}) error {
	args := m.Called(md, out)
	return args.Error(0)
}

func (m *mockModelLogs) Type() interface{} {
	return m.typ
}
