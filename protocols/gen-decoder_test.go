// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package protocols

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/consumer/pdata"
)

func TestMetricsDecoder_DecodeMetricsError(t *testing.T) {
	model := &mockModelMetrics{typ: ""}
	bytes := &mockBytesMetrics{}

	d := &MetricsDecoder{
		mod: model,
		enc: bytes,
	}

	//expectedMetrics := pdata.NewMetrics()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}
	expectedError := errors.New("decode failed")

	bytes.On("DecodeMetrics", expectedBytes).Return(expectedModel, expectedError)
	//model.On("ToMetrics", expectedModel).Return(expectedMetrics, nil)

	_, err := d.DecodeMetrics(expectedBytes)

	assert.Error(t, err)
	assert.Equal(t, expectedError, err)
	//assert.Equal(t, expectedMetrics, actualMetrics)
}

func TestMetricsDecoder_DecodeMetrics(t *testing.T) {
	model := &mockModelMetrics{typ: ""}
	bytes := &mockBytesMetrics{}

	d := &MetricsDecoder{
		mod: model,
		enc: bytes,
	}

	expectedMetrics := pdata.NewMetrics()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}

	bytes.On("DecodeMetrics", expectedBytes).Return(expectedModel, nil)
	model.On("ToMetrics", expectedModel).Return(expectedMetrics, nil)

	actualMetrics, err := d.DecodeMetrics(expectedBytes)

	assert.NoError(t, err)
	assert.Equal(t, expectedMetrics, actualMetrics)
}

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

func TestTracesDecoder_DecodeTracesError(t *testing.T) {
	model := &mockModelTraces{typ: ""}
	bytes := &mockBytesTraces{}

	d := &TracesDecoder{
		mod: model,
		enc: bytes,
	}

	//expectedTraces := pdata.NewTraces()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}
	expectedError := errors.New("decode failed")

	bytes.On("DecodeTraces", expectedBytes).Return(expectedModel, expectedError)
	//model.On("ToTraces", expectedModel).Return(expectedTraces, nil)

	_, err := d.DecodeTraces(expectedBytes)

	assert.Error(t, err)
	assert.Equal(t, expectedError, err)
	//assert.Equal(t, expectedTraces, actualTraces)
}

func TestTracesDecoder_DecodeTraces(t *testing.T) {
	model := &mockModelTraces{typ: ""}
	bytes := &mockBytesTraces{}

	d := &TracesDecoder{
		mod: model,
		enc: bytes,
	}

	expectedTraces := pdata.NewTraces()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}

	bytes.On("DecodeTraces", expectedBytes).Return(expectedModel, nil)
	model.On("ToTraces", expectedModel).Return(expectedTraces, nil)

	actualTraces, err := d.DecodeTraces(expectedBytes)

	assert.NoError(t, err)
	assert.Equal(t, expectedTraces, actualTraces)
}

// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

func TestLogsDecoder_DecodeLogsError(t *testing.T) {
	model := &mockModelLogs{typ: ""}
	bytes := &mockBytesLogs{}

	d := &LogsDecoder{
		mod: model,
		enc: bytes,
	}

	//expectedLogs := pdata.NewLogs()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}
	expectedError := errors.New("decode failed")

	bytes.On("DecodeLogs", expectedBytes).Return(expectedModel, expectedError)
	//model.On("ToLogs", expectedModel).Return(expectedLogs, nil)

	_, err := d.DecodeLogs(expectedBytes)

	assert.Error(t, err)
	assert.Equal(t, expectedError, err)
	//assert.Equal(t, expectedLogs, actualLogs)
}

func TestLogsDecoder_DecodeLogs(t *testing.T) {
	model := &mockModelLogs{typ: ""}
	bytes := &mockBytesLogs{}

	d := &LogsDecoder{
		mod: model,
		enc: bytes,
	}

	expectedLogs := pdata.NewLogs()
	expectedBytes := []byte{1, 2, 3}
	expectedModel := struct{}{}

	bytes.On("DecodeLogs", expectedBytes).Return(expectedModel, nil)
	model.On("ToLogs", expectedModel).Return(expectedLogs, nil)

	actualLogs, err := d.DecodeLogs(expectedBytes)

	assert.NoError(t, err)
	assert.Equal(t, expectedLogs, actualLogs)
}
